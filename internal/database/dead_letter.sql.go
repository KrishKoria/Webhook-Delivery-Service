// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: dead_letter.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const deleteDeadLetterTask = `-- name: DeleteDeadLetterTask :exec
DELETE FROM dead_letter_tasks
WHERE id = ?
`

func (q *Queries) DeleteDeadLetterTask(ctx context.Context, id string) error {
	_, err := q.db.ExecContext(ctx, deleteDeadLetterTask, id)
	return err
}

const getDeadLetterTask = `-- name: GetDeadLetterTask :one
SELECT id, original_task_id, subscription_id, payload, failed_at, reason, last_attempt_at, attempt_count, status, target_url, event_type, error_details
FROM dead_letter_tasks
WHERE id = ?
`

func (q *Queries) GetDeadLetterTask(ctx context.Context, id string) (DeadLetterTask, error) {
	row := q.db.QueryRowContext(ctx, getDeadLetterTask, id)
	var i DeadLetterTask
	err := row.Scan(
		&i.ID,
		&i.OriginalTaskID,
		&i.SubscriptionID,
		&i.Payload,
		&i.FailedAt,
		&i.Reason,
		&i.LastAttemptAt,
		&i.AttemptCount,
		&i.Status,
		&i.TargetUrl,
		&i.EventType,
		&i.ErrorDetails,
	)
	return i, err
}

const insertDeadLetterTask = `-- name: InsertDeadLetterTask :exec
INSERT INTO dead_letter_tasks (
    id, original_task_id, subscription_id, payload, failed_at, reason, last_attempt_at, attempt_count, status, target_url, event_type, error_details
) VALUES (
    ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?
)
`

type InsertDeadLetterTaskParams struct {
	ID             string
	OriginalTaskID string
	SubscriptionID string
	Payload        string
	FailedAt       time.Time
	Reason         string
	LastAttemptAt  sql.NullTime
	AttemptCount   int64
	Status         string
	TargetUrl      sql.NullString
	EventType      sql.NullString
	ErrorDetails   sql.NullString
}

func (q *Queries) InsertDeadLetterTask(ctx context.Context, arg InsertDeadLetterTaskParams) error {
	_, err := q.db.ExecContext(ctx, insertDeadLetterTask,
		arg.ID,
		arg.OriginalTaskID,
		arg.SubscriptionID,
		arg.Payload,
		arg.FailedAt,
		arg.Reason,
		arg.LastAttemptAt,
		arg.AttemptCount,
		arg.Status,
		arg.TargetUrl,
		arg.EventType,
		arg.ErrorDetails,
	)
	return err
}

const listDeadLetterTasksForSubscription = `-- name: ListDeadLetterTasksForSubscription :many
SELECT id, original_task_id, subscription_id, payload, failed_at, reason, last_attempt_at, attempt_count, status, target_url, event_type, error_details
FROM dead_letter_tasks
WHERE subscription_id = ?
ORDER BY failed_at DESC
LIMIT ? OFFSET ?
`

type ListDeadLetterTasksForSubscriptionParams struct {
	SubscriptionID string
	Limit          int64
	Offset         int64
}

func (q *Queries) ListDeadLetterTasksForSubscription(ctx context.Context, arg ListDeadLetterTasksForSubscriptionParams) ([]DeadLetterTask, error) {
	rows, err := q.db.QueryContext(ctx, listDeadLetterTasksForSubscription, arg.SubscriptionID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DeadLetterTask
	for rows.Next() {
		var i DeadLetterTask
		if err := rows.Scan(
			&i.ID,
			&i.OriginalTaskID,
			&i.SubscriptionID,
			&i.Payload,
			&i.FailedAt,
			&i.Reason,
			&i.LastAttemptAt,
			&i.AttemptCount,
			&i.Status,
			&i.TargetUrl,
			&i.EventType,
			&i.ErrorDetails,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDeadLetterTaskStatus = `-- name: UpdateDeadLetterTaskStatus :exec
UPDATE dead_letter_tasks
SET status = ?, last_attempt_at = ?, attempt_count = attempt_count + 1, error_details = ?
WHERE id = ?
`

type UpdateDeadLetterTaskStatusParams struct {
	Status        string
	LastAttemptAt sql.NullTime
	ErrorDetails  sql.NullString
	ID            string
}

func (q *Queries) UpdateDeadLetterTaskStatus(ctx context.Context, arg UpdateDeadLetterTaskStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateDeadLetterTaskStatus,
		arg.Status,
		arg.LastAttemptAt,
		arg.ErrorDetails,
		arg.ID,
	)
	return err
}
