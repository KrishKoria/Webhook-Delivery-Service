// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: delivery.sql

package database

import (
	"context"
	"database/sql"
	"time"
)

const createDeliveryLog = `-- name: CreateDeliveryLog :exec
INSERT INTO delivery_logs (
    id, delivery_task_id, subscription_id, target_url, timestamp,
    attempt_number, outcome, http_status, error_details
) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)
`

type CreateDeliveryLogParams struct {
	ID             string
	DeliveryTaskID string
	SubscriptionID string
	TargetUrl      string
	Timestamp      time.Time
	AttemptNumber  int64
	Outcome        string
	HttpStatus     sql.NullInt64
	ErrorDetails   sql.NullString
}

func (q *Queries) CreateDeliveryLog(ctx context.Context, arg CreateDeliveryLogParams) error {
	_, err := q.db.ExecContext(ctx, createDeliveryLog,
		arg.ID,
		arg.DeliveryTaskID,
		arg.SubscriptionID,
		arg.TargetUrl,
		arg.Timestamp,
		arg.AttemptNumber,
		arg.Outcome,
		arg.HttpStatus,
		arg.ErrorDetails,
	)
	return err
}

const createDeliveryTask = `-- name: CreateDeliveryTask :exec
INSERT INTO delivery_tasks (id, subscription_id, payload, status, attempt_count, created_at)
VALUES (?, ?, ?, 'pending', 0, CURRENT_TIMESTAMP)
`

type CreateDeliveryTaskParams struct {
	ID             string
	SubscriptionID string
	Payload        string
}

func (q *Queries) CreateDeliveryTask(ctx context.Context, arg CreateDeliveryTaskParams) error {
	_, err := q.db.ExecContext(ctx, createDeliveryTask, arg.ID, arg.SubscriptionID, arg.Payload)
	return err
}

const getDeliveryTask = `-- name: GetDeliveryTask :one
SELECT id, subscription_id, payload, created_at, status, last_attempt_at, attempt_count FROM delivery_tasks WHERE id = ?
`

func (q *Queries) GetDeliveryTask(ctx context.Context, id string) (DeliveryTask, error) {
	row := q.db.QueryRowContext(ctx, getDeliveryTask, id)
	var i DeliveryTask
	err := row.Scan(
		&i.ID,
		&i.SubscriptionID,
		&i.Payload,
		&i.CreatedAt,
		&i.Status,
		&i.LastAttemptAt,
		&i.AttemptCount,
	)
	return i, err
}

const listDeliveryLogsForTask = `-- name: ListDeliveryLogsForTask :many
SELECT id, delivery_task_id, subscription_id, target_url, timestamp, attempt_number, outcome, http_status, error_details FROM delivery_logs
WHERE delivery_task_id = ?
ORDER BY attempt_number ASC
`

func (q *Queries) ListDeliveryLogsForTask(ctx context.Context, deliveryTaskID string) ([]DeliveryLog, error) {
	rows, err := q.db.QueryContext(ctx, listDeliveryLogsForTask, deliveryTaskID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DeliveryLog
	for rows.Next() {
		var i DeliveryLog
		if err := rows.Scan(
			&i.ID,
			&i.DeliveryTaskID,
			&i.SubscriptionID,
			&i.TargetUrl,
			&i.Timestamp,
			&i.AttemptNumber,
			&i.Outcome,
			&i.HttpStatus,
			&i.ErrorDetails,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPendingDeliveryTasks = `-- name: ListPendingDeliveryTasks :many
SELECT id, subscription_id, payload, created_at, status, last_attempt_at, attempt_count FROM delivery_tasks
WHERE status = 'pending'
ORDER BY created_at ASC
LIMIT 10
`

func (q *Queries) ListPendingDeliveryTasks(ctx context.Context) ([]DeliveryTask, error) {
	rows, err := q.db.QueryContext(ctx, listPendingDeliveryTasks)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DeliveryTask
	for rows.Next() {
		var i DeliveryTask
		if err := rows.Scan(
			&i.ID,
			&i.SubscriptionID,
			&i.Payload,
			&i.CreatedAt,
			&i.Status,
			&i.LastAttemptAt,
			&i.AttemptCount,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listRecentDeliveryLogsForSubscription = `-- name: ListRecentDeliveryLogsForSubscription :many
SELECT id, delivery_task_id, subscription_id, target_url, timestamp, attempt_number, outcome, http_status, error_details FROM delivery_logs
WHERE subscription_id = ?
ORDER BY timestamp DESC
LIMIT 20
`

func (q *Queries) ListRecentDeliveryLogsForSubscription(ctx context.Context, subscriptionID string) ([]DeliveryLog, error) {
	rows, err := q.db.QueryContext(ctx, listRecentDeliveryLogsForSubscription, subscriptionID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []DeliveryLog
	for rows.Next() {
		var i DeliveryLog
		if err := rows.Scan(
			&i.ID,
			&i.DeliveryTaskID,
			&i.SubscriptionID,
			&i.TargetUrl,
			&i.Timestamp,
			&i.AttemptNumber,
			&i.Outcome,
			&i.HttpStatus,
			&i.ErrorDetails,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDeliveryTaskStatus = `-- name: UpdateDeliveryTaskStatus :exec
UPDATE delivery_tasks
SET status = ?, last_attempt_at = ?, attempt_count = ?
WHERE id = ?
`

type UpdateDeliveryTaskStatusParams struct {
	Status        string
	LastAttemptAt sql.NullTime
	AttemptCount  int64
	ID            string
}

func (q *Queries) UpdateDeliveryTaskStatus(ctx context.Context, arg UpdateDeliveryTaskStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateDeliveryTaskStatus,
		arg.Status,
		arg.LastAttemptAt,
		arg.AttemptCount,
		arg.ID,
	)
	return err
}
